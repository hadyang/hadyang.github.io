<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>笔记 on HadYang</title>
    <link>hadyang.github.io/tags/%E7%AC%94%E8%AE%B0/</link>
    <description>Recent content in 笔记 on HadYang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 20 Dec 2016 22:24:49 +0000</lastBuildDate>
    
	<atom:link href="hadyang.github.io/tags/%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Idea中通过Maven创建 Archetypes</title>
      <link>hadyang.github.io/posts/idea-maven-custom-archetypes/</link>
      <pubDate>Tue, 20 Dec 2016 22:24:49 +0000</pubDate>
      
      <guid>hadyang.github.io/posts/idea-maven-custom-archetypes/</guid>
      <description>&lt;p&gt;最近在做项目的时候发现Web项目中很多配置都是相对固定的，比如Spring，常用的配置都是那些，每次新建工程的时候很是麻烦，为了减少没必要的复制粘贴（提高效率），这里介绍一种自定义 Archetypes 的方法。Archetypes 是Maven中的一种模板，我们可以通过 Archetypes 将常用的配置放在模板里，每次新建项目的时候选择模板就可以了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>深入Java虚拟机读书笔记——对象的生命周期</title>
      <link>hadyang.github.io/posts/jvm-object-life-cycle/</link>
      <pubDate>Sat, 30 Apr 2016 13:30:28 +0000</pubDate>
      
      <guid>hadyang.github.io/posts/jvm-object-life-cycle/</guid>
      <description>&lt;p&gt;一旦一个类被装载、连接和初始化，它就随时可以被使用。程序可以访问它的静态字段，调用它的静态方法，或者创建它的实例。作为Java程序员有必要了解Java对象的生命周期。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>深入Java虚拟机读书笔记——类加载器</title>
      <link>hadyang.github.io/posts/jvm-class-loader/</link>
      <pubDate>Fri, 29 Apr 2016 22:05:19 +0000</pubDate>
      
      <guid>hadyang.github.io/posts/jvm-class-loader/</guid>
      <description>&lt;p&gt;在前面一篇的《深入Java虚拟机读书笔记——虚拟机体系结构》中，提到了类加载器，类加载器是JVM重要的组成部分，在类第一次被使用时，类加载器会将类的class文件加载到JVM中，这个class文件包含了类的基本信息：方法、域、继承等等。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>深入Java虚拟机读书笔记——虚拟机体系结构</title>
      <link>hadyang.github.io/posts/jvm-architecture/</link>
      <pubDate>Wed, 27 Apr 2016 16:00:05 +0000</pubDate>
      
      <guid>hadyang.github.io/posts/jvm-architecture/</guid>
      <description>&lt;p&gt;最近在逛知乎的时候，看到有人推荐这本《深入Java虚拟机》，这几天一直在看这本书，虽然这本书里使用的JVM版本比较低，但是讲的内容还是很有营养的。在看这本书的时候学习到很多东西，在这里写一下，方便以后学习：）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>深入Java虚拟机读书笔记——垃圾回收</title>
      <link>hadyang.github.io/posts/jvm-gc/jvm-gc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>hadyang.github.io/posts/jvm-gc/jvm-gc/</guid>
      <description>&lt;p&gt;作为自动管理内存的编程语言，Java为我们做了许多的工作。程序员不需要关心内存分配和回收，这大大提高了程序员的工作效率，同时也减少了内存泄漏的风险。正是由于Java语言的这种特性，导致很多程序员对内存分配没有太深刻的概念，产生OOM后不知从何处修改。我们需要对Java内存管理进行了解，更加合理的利用Java自动管理内存的特性。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>深入Java虚拟机读书笔记——类装载、连接和初始化</title>
      <link>hadyang.github.io/posts/jvm-class-load-init/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>hadyang.github.io/posts/jvm-class-load-init/</guid>
      <description>&lt;p&gt;在前面的文章《深入Java虚拟机读书笔记——类加载器》中我们介绍了JVM中类加载器，类加载器是JVM中重要的组成部分，当类第一次被使用时，由它负责类的装载、连接和初始化，进而能让我们使用类来生成对象等等。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>